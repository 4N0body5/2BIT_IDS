/* ********* len pre vyhnutie sa znovu-vytvoreniu pri opakovanom pusteni *********** */
drop table liek             CASCADE CONSTRAINTS;
drop table liek_na_predpis   CASCADE CONSTRAINTS;
drop table liek_bez_predpisu CASCADE CONSTRAINTS;
drop table pobocka           CASCADE CONSTRAINTS;
drop table poistovna         CASCADE CONSTRAINTS;
drop table mnozstvo          CASCADE CONSTRAINTS;
drop table vyska_prispevku   CASCADE CONSTRAINTS;
drop table vydany_liek       CASCADE CONSTRAINTS;

purge recyclebin;
/* ********************************************************************************* */

/*  prva varianta implementacie specializacie pretoze typ lieku na predpis a bez predpisu sa prekryva  */
create table liek (
    "EAN-13" int check(length("EAN-13") = 13) primary key,
    nazov varchar(255) not null unique,
    popis varchar(255),
    cena number(10,2) not null check(cena >= 0)
    /*nutnost_predpisu varchar(11) check (nutnost_predpisu in ('na predpis','bez predpis')), ** asi skor pre tretiu variantu **/
);

create table liek_na_predpis (
    "EAN-13" int primary key references liek("EAN-13"),
    cena_s_prispevkom number(10,2) not null check(cena_s_prispevkom >= 0)
);

create table liek_bez_predpisu (
    "EAN-13" int primary key references liek("EAN-13")
);


create table pobocka (
    id_pobocky int generated by default as identity(start with 1 increment by 1) primary key,
    adresa varchar(255) not null check(regexp_like(adresa, '^\w+\s\d+(\/\d+)?\,?\s\w+(\s\w+)*\,?\s\d{5}$')) unique, -- ulica cislo[/cislo][,] mesto[,] psc
    /*ulica varchar(255) not null, mesto varchar(255) not null, psc int check(length(psc) = 5) not null, ** keby s tym potrebujeme pracovat **/
    telefon varchar(13) not null check(regexp_like(telefon,'^\+\d{12}$'))
);

create table mnozstvo (
    "EAN-13" int,
    id_pobocky int,
    mnozstvo int not null check(mnozstvo >= 0),
    primary key ("EAN-13", id_pobocky),
    foreign key ("EAN-13") references liek("EAN-13"),
    foreign key (id_pobocky) references pobocka(id_pobocky)
);

create table poistovna (
    kod_poistovne int check(length(kod_poistovne) = 3) primary key,
    nazov varchar(255) not null,
    email varchar(255) not null check(regexp_like(email,'^\w+\@\w+\.\w{2,3}$')), -- jozko_mrkva@gmail.com --> ??  [\w\d\.\-]
    telefon varchar(13) not null check(regexp_like(telefon,'^\+\d{12}$'))                  -- +420123456789
);

create table vyska_prispevku (
    "EAN-13" int,
    kod_poistovne int,
    vyska_prispevku number(10,2) not null check(vyska_prispevku >= 0),
    primary key ("EAN-13", kod_poistovne),
    foreign key ("EAN-13") references liek("EAN-13"),
    foreign key (kod_poistovne) references poistovna(kod_poistovne)
);

create table vydany_liek (
    id_vydaneho_lieku int generated by default as identity primary key,
    datum_vydania date not null,
    kod_lieku_bez_predpisu int references liek_bez_predpisu("EAN-13"), -- nullable
    kod_lieku_na_predpis int references liek_na_predpis("EAN-13"),     -- nullable
    constraint check_with_or_without check ((kod_lieku_bez_predpisu is null or kod_lieku_na_predpis is null) and (not (kod_lieku_bez_predpisu is null and kod_lieku_na_predpis is null))),
    kod_poistovne number(3,0) references poistovna(kod_poistovne), /* check dependency on kod_lieku_na_predpis */
    constraint check_with_and_ins check ((kod_poistovne is null and kod_lieku_na_predpis is null) or (not(kod_poistovne is null and kod_lieku_na_predpis is null))),
    kod_pobocky int not null references pobocka(id_pobocky)
);

insert into liek values (8595116523847,'Paralen 500', null, 50.00);
insert into liek values (3664798033953, 'Ibalgin 400', null, 85.00);
insert into liek values (7612076354814, 'EXCIPIAL U LIPOLOTIO', 'EXCIPIAL U LIPOLOTIO 40MG/ML kožní podání emulze 200ML', 159.00);
insert into liek values (8584055999424,'Elocom', 'ELOCOM je kortizónový hormonálny liek určený na aplikáciu na kožu.', 110.00);

insert into liek_bez_predpisu select "EAN-13" from liek where nazov='Paralen 500';
insert into liek_bez_predpisu values (3664798033953);
insert into liek_bez_predpisu values (7612076354814);

insert into liek_na_predpis values (7612076354814, 106.53);
insert into liek_na_predpis values (8584055999424, 48.17);

insert into pobocka values (default, 'Bašty 413/2, Brno, 62100', '+420541226066');
insert into pobocka values (default, 'Nádražní 595, Brno, 60200', '+420542211283');

insert into mnozstvo values (8595116523847, 1, 63);
insert into mnozstvo values (8595116523847, 2, 55);
insert into mnozstvo values (3664798033953, 1, 21);
insert into mnozstvo values (3664798033953, 2, 13);
insert into mnozstvo values (7612076354814, 1, 27);
insert into mnozstvo values (7612076354814, 2, 16);
insert into mnozstvo values (8584055999424, 1, 8);
insert into mnozstvo values (8584055999424, 2, 6);

insert into poistovna values (111, 'Všeobecná zdravotní pojišťovna', 'info@vzp.cz', '+420952222222');
insert into poistovna values (201, 'Vojenská zdravotní pojišťovna', 'posta@vozp.cz', '+420222929199');

insert into vyska_prispevku values (7612076354814, 111, 52.47);
insert into vyska_prispevku values (8584055999424, 111, 61.83);

insert into vydany_liek values (default, to_date('2021-06-06', 'YYYY-MM-DD'), 3664798033953, null, null, 1);
insert into vydany_liek values (default, to_date('2021-06-09', 'YYYY-MM-DD'), null, 8584055999424, 111, 1);

/*

 todo:
 * skontrolovat vztahy, obmedzenia a ostatne vlastnosti..
 * doplnit ukazkove data
 * podm.: v tabulkach alespoň jeden sloupec se speciálním omezením hodnot (RČ, IČ, IČPE, ISBN, ISSN atp.), treba povolit pouze platné hodnoty (pomocí CHECK integritního omezení).
 * skontrolovat implementaciu specializacie
 * generovanie ID ak bude PK NULL??

 *kod_lieku vs kod_lieku_bez_predpisu/na_predpis vs EAN-13
 */